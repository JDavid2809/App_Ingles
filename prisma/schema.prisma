

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// Modelo: estudiante
model estudiante {
  id_estudiante   Int       @id @default(autoincrement())
    id_usuario      Int       @unique   
  nombre          String    @db.VarChar(100)
  email           String    @unique @db.VarChar(100)
  telefono        String?   @db.VarChar(20)
  edad            Int
  id_categoria_edad Int?
  b_activo        Boolean?  @default(true)

  categoria_edad  categoria_edad? @relation(fields: [id_categoria_edad], references: [id_categoria_edad])
  horario         horario[]
  historial_academico historial_academico[]
  pago            pago[]
  imparte_registro_remota imparte_registro_remota[]
  resultado_examen resultado_examen[]
  usuario         usuario  @relation(fields: [id_usuario], references: [id], onDelete: Cascade)

  @@index([id_categoria_edad])
}


model categoria_edad {
  id_categoria_edad Int     @id @default(autoincrement())
  rango             String  @db.VarChar(50)
  b_activo          Boolean @default(true)

  estudiante        estudiante[]
}

// Modelo: examen
model examen {
  id_examen     Int       @id @default(autoincrement())
  id_nivel      Int?
  nombre        String    @db.VarChar(100)
  b_activo      Boolean?  @default(true)

  nivel         nivel?    @relation(fields: [id_nivel], references: [id_nivel])
  pregunta      pregunta[]
  resultado_examen resultado_examen[]

  @@index([id_nivel])
}

// Modelo: historial_academico
model historial_academico {
  id_historial    Int       @id @default(autoincrement())
  id_estudiante   Int
  id_imparte      Int
  id_capturo      Int
  tipo_capturo    TipoCapturo?
  calificacion    Float?
  fecha           DateTime? @db.Date
  tipo            TipoEvaluacion?
  comentario      String?   
  asistencia      Float?
  tipo_evaluacion TipoEvaluacionExamen?

  estudiante      estudiante @relation(fields: [id_estudiante], references: [id_estudiante])
  imparte        imparte    @relation(fields: [id_imparte], references: [id_imparte])

  @@index([id_estudiante])
  @@index([id_capturo])
  @@index([id_imparte])
}

enum TipoCapturo {
  PROFESOR
  USER
}

enum TipoEvaluacion {
  PARCIAL
  FINAL
}

enum TipoEvaluacionExamen {
  ORD
  RE
  EX
  EX2
}

// Modelo: horario
model horario {
  id_horario    Int       @id @default(autoincrement())
  id_estudiante Int
  id_curso      Int
  comentario    String?   

  estudiante    estudiante @relation(fields: [id_estudiante], references: [id_estudiante])
  curso        curso      @relation(fields: [id_curso], references: [id_curso])
  horario_detalle horario_detalle[]

  @@index([id_estudiante])
  @@index([id_curso])
}

// Modelo: horario_detalle
model horario_detalle {
  id_imparte Int
  id_horario Int
  comentario String? 

  imparte   imparte @relation(fields: [id_imparte], references: [id_imparte])
  horario   horario @relation(fields: [id_horario], references: [id_horario])

  @@id([id_imparte, id_horario])
  @@index([id_horario])
}

// Modelo: horario_pred
model horario_pred {
  id_horario_pred Int      @id @default(autoincrement())
  id_curso        Int
  comentario      String?  

  curso           curso            @relation(fields: [id_curso], references: [id_curso])
  horario_pred_detalle horario_pred_detalle[]

  @@index([id_curso])
}

// Modelo: horario_pred_detalle
model horario_pred_detalle {
  id_detalle      Int      @id @default(autoincrement())
  id_imparte      Int
  id_horario_pred Int

  imparte         imparte       @relation(fields: [id_imparte], references: [id_imparte])
  horario_pred    horario_pred  @relation(fields: [id_horario_pred], references: [id_horario_pred])

  @@index([id_horario_pred])
  @@index([id_imparte])
}

// Modelo: imparte
model imparte {
  id_imparte    Int       @id @default(autoincrement())
  id_profesor   Int
  id_nivel      Int
  id_curso      Int
  dias          String?   @db.VarChar(12)
  hora_inicio   Int?      
  duracion_min  Int?      
  tipo          TipoImparte?

  profesor      profesor  @relation(fields: [id_profesor], references: [id_profesor])
  nivel         nivel     @relation(fields: [id_nivel], references: [id_nivel])
  curso         curso     @relation(fields: [id_curso], references: [id_curso])
  horario_detalle horario_detalle[]
  horario_pred_detalle horario_pred_detalle[]
  historial_academico historial_academico[]
  pago          pago[]
  imparte_calendario_remota imparte_calendario_remota[]

  @@index([id_profesor])
  @@index([id_nivel])
  @@index([id_curso])
}

enum TipoImparte {
  PRESENCIAL
  ONLINE
}

// Modelo: imparte_calendario_remota
model imparte_calendario_remota {
  id_calendario_remota Int      @id @default(autoincrement())
  id_imparte           Int
  hora_inicio          String?  
  duracion_minutos     Int?
  url                  String?  @db.VarChar(60)
  fecha                DateTime? @db.Date
  tema                 String?  @db.VarChar(30)
  recurrencia          Recurrencia?

  imparte              imparte  @relation(fields: [id_imparte], references: [id_imparte])
    imparte_registro_remota imparte_registro_remota[]

  @@index([id_imparte])
}

enum Recurrencia {
  UNICO
  PERIODICO
}

// Modelo: imparte_registro_remota
model imparte_registro_remota {
  id_registro          Int       @id @default(autoincrement())
  id_estudiante        Int
  id_calendario_remota Int
  fecha_ingreso        DateTime?

  estudiante           estudiante @relation(fields: [id_estudiante], references: [id_estudiante])
  imparte_calendario_remota imparte_calendario_remota @relation(fields: [id_calendario_remota], references: [id_calendario_remota])

  @@index([id_calendario_remota])
  @@index([id_estudiante])
}

// Modelo: nivel
model nivel {
  id_nivel  Int      @id @default(autoincrement())
  nombre    String   @unique
  b_activo  Boolean? @default(true)

  examen    examen[]
  imparte   imparte[]
}

// Modelo: pago
model pago {
  id_pago       Int       @id @default(autoincrement())
  id_estudiante Int?
  id_imparte    Int
  monto        Decimal     @db.Decimal(10, 2)
  fecha_pago   DateTime  @db.Date
  tipo         PagoTipo

  estudiante   estudiante? @relation(fields: [id_estudiante], references: [id_estudiante])
  imparte     imparte     @relation(fields: [id_imparte], references: [id_imparte])

  @@index([id_estudiante])
  @@index([id_imparte])
}

enum PagoTipo {
  Mensualidad
  Inscripción
}

// Modelo: pregunta
model pregunta {
  id_pregunta  Int      @id @default(autoincrement())
  id_examen    Int?
  descripcion  String   
  ruta_file_media String? @db.VarChar(100)

  examen      examen?   @relation(fields: [id_examen], references: [id_examen])
  respuesta   respuesta[]

  @@index([id_examen])
}

// Modelo: profesor
model profesor {
  id_profesor     Int      @id @default(autoincrement())
  id_usuario      Int      @unique

  usuario         usuario  @relation(fields: [id_usuario], references: [id], onDelete: Cascade)

  nombre          String   @db.VarChar(30)
  paterno         String?  @db.VarChar(25)
  materno         String?  @db.VarChar(25)
  curp            String?  @db.VarChar(20)
  rfc             String?  @db.VarChar(14)
  direccion       String?  @db.VarChar(30)
  telefonos       String?  @db.VarChar(25)
  nivel_estudios  String?  @db.VarChar(30)
  observaciones   String?  @db.VarChar(50)
  b_activo        Boolean? @default(true)

  imparte         imparte[]
}


// Modelo: respuesta
model respuesta {
  id_respuesta  Int      @id @default(autoincrement())
  id_pregunta   Int?
  descripcion   String   
  ruta_file_media String? @db.VarChar(100)
  es_correcta   Boolean

  pregunta     pregunta? @relation(fields: [id_pregunta], references: [id_pregunta])

  @@index([id_pregunta])
}

// Modelo: resultado_examen
model resultado_examen {
  id_resultado Int      @id @default(autoincrement())
  id_estudiante Int?
  id_examen    Int?
  calificacion Decimal    @db.Decimal(5, 2)
  fecha        DateTime @db.Date

  estudiante   estudiante? @relation(fields: [id_estudiante], references: [id_estudiante])
  examen       examen?     @relation(fields: [id_examen], references: [id_examen])

  @@index([id_estudiante])
  @@index([id_examen])
}

// Modelo: usuario
model Administrador {
  id_administrador  Int      @id @default(autoincrement())
  id_usuario        Int      @unique

  usuario           usuario  @relation(fields: [id_usuario], references: [id], onDelete: Cascade)

  nombre       String? @db.VarChar(25)
  image        String  @db.VarChar(50)
  email_unico  String? @db.VarChar(200)
  b_activo     Boolean @default(true)
}


model usuario {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  nombre       String
  password     String
  rol          Rol

  estudiante   estudiante?        // relación inversa
  profesor     profesor?
  administrador Administrador?
}

enum Rol {
  ADMIN
  PROFESOR
  ESTUDIANTE
}





// Modelo: curso
model curso {
  id_curso     Int       @id @default(autoincrement())
  nombre       String    @db.VarChar(100)
  modalidad    Modalidad
  inicio       DateTime? @db.Date
  fin          DateTime? @db.Date
  b_activo     Boolean?  @default(true)

  // Relaciones
  horario         horario[]
  horario_pred    horario_pred[]
  imparte         imparte[]
}

enum Modalidad {
  PRESENCIAL
  ONLINE
}
